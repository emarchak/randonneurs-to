@import "theme";

.form {
  padding: 0 0;
  margin: 0 auto;
  width: 100%;
  @include media(large) {
    width: 66%;
  } 
}

.formWrapper {
  background-color: get-color(secondary, light);
  border-top: 0.1rem solid get-outline-color(secondary, light);
  border-bottom: 0.1rem solid get-outline-color(secondary, light);
}

.button {
  box-shadow: get-dropshadow();
  display: inline-block;
  padding: get-spacing(small) get-spacing(medium);
  color: get-color(text);
  background: get-color(text, lighter);
  border: 0.1rem solid get-outline-color(text, lighter);
  box-shadow: get-dropshadow();
  @include border-radius();
  text-align: center;
  
  width: 100%;
  transition: all 250ms ease-in-out, transform 150ms ease;
  -webkit-appearance: none;
  -moz-appearance: none;

  &:hover:enabled,
  &:focus:enabled {
    cursor: pointer;
    background-color: get-hover-color(text, lighter)
  }
  
  &:active {
    box-shadow: get-dropshadow(pressed);
  }

  &:focus {
    outline: none;
    border-color: get-color(text, light);
  }  

  &:disabled {
    opacity: 60%;
  }

  @include media(large) {
    width: auto;
  }
}

.primaryButton {
  background: get-color(primary, dark);
  border-color: get-outline-color(primary, dark);

  &:hover:enabled,
  &:focus:enabled {
    background-color: get-hover-color(primary, dark);
  }

  &:focus {
    border-color: get-outline-color(primary, darkest);
  }
}

.secondaryButton{
  background: get-color(secondary, light);
  border-color: get-outline-color(secondary, light);

  &:hover:enabled,
  &:focus:enabled {
    background-color: get-hover-color(secondary, light);
  }

  &:focus {
    border-color: get-outline-color(secondary);
  }
}

.smallButton {
  padding: (get-spacing(small) / 3) 0 ;
}

.blockButton {
  display:block;
}

.fieldset {
  border: 0;
  padding-top: get-spacing();
  width: 100%;
}

.input {
  background-color: get-color(background);
  height: get-font-size(large);
  padding: 0 get-spacing(small);
  border: 0.1rem solid get-color(secondary);
  @include border-radius();

  &:focus {
    outline-width: 0;
    border-color: get-color(secondary, darkest);
  }

  &:disabled {
    border-color: get-color(secondary, light);
    background-color: get-color(text, lightest);
  }
}

.help {
  display: block;
  font-size: get-font-size(small);
  color: get-color(text, subtle);
}

.help,
.inputText,
.inlineInputs {
  width: calc(100% - #{get-spacing(small) * 2});
}


.inlineInputs {
  display: flex;
  width: 100%;
  margin: 0;

  * {
    padding-left: get-spacing(small);
    flex-grow:1;
  }

  *:first-child {
    padding-left: 0
  }

  .inputText {
    width: 100%;
  }
}

.select {
  background-image:
    linear-gradient(45deg, transparent 50%, get-color(secondary, light) 50%),
    linear-gradient(135deg, get-color(secondary, light) 50%, transparent 50%),
    linear-gradient(to right, #ccc, #ccc);
  background-position:
    calc(100% - 20px) calc(1em + 2px),
    calc(100% - 15px) calc(1em + 2px),
    calc(100% - 2.5em) 0.4em;
  background-size:
    5px 5px,
    5px 5px,
    1px 1.5em;
  background-repeat: no-repeat;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
  box-sizing: border-box;
    -webkit-appearance: none;
    -moz-appearance: none;
  width: 100%;
}

.label {
  display: block;
  font-size: get-font-size(small);
}

.hidden {
  visibility: hidden;
  height: 0;
}

.error-list {
  list-style: none;
  margin-bottom: get-spacing();
  margin-left: 0;
}

.error {
  margin-bottom: get-spacing(small);
  &:before {
    content: "âœ—";
    margin-right: 0.25rem;
  }
}

.date-input {
  margin-bottom: 1.45rem;
}

.date-input-overrides {
  width: calc(100% - #{get-spacing(small) * 2});
  @include media(large) {
    width: 66%;
  }
}

.dateInputField {
  width: 100%;
}

.checkbox {
  font-size: 2em;
}

.checkboxLabel {
  padding-left: .6em;
  &:hover {
    cursor: pointer;
  }
}

.radio {
  margin-right: .1rem
  line-
}
.radioLabel {
  display:block;
}

.loading-wrapper {
  text-align: center;
}

.loading {
  display: inline-block;
  position: relative;
  width: 1rem;
  height: 1rem;

  div {
    position: absolute;
    top: 1rem;
    width: .5rem;
    height: .5rem;
    border-radius: 50%;
    background: get-color(text);
    animation-timing-function: cubic-bezier(0, 1, 1, 0);
  }
  div:nth-child(1) {
    left: .5rem;
    animation: loading1 0.6s infinite;
  }
  div:nth-child(2) {
    left: .5rem;
    animation: loading2 0.6s infinite;
  }
  div:nth-child(3) {
    left: 2rem;
    animation: loading2 0.6s infinite;
  }
  div:nth-child(4) {
    left: 3.5rem;
    animation: loading3 0.6s infinite;
  }
}
@keyframes loading1 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes loading3 {
  0% {
    transform: scale(1);
  }
  100% {
    transform: scale(0);
  }
}
@keyframes loading2 {
  0% {
    transform: translate(0, 0);
  }
  100% {
    transform: translate(24px, 0);
  }
}

.radioTable {

  &Wrapper {
    background-color: get-color(background);
    border: 0.1rem solid get-color(secondary);
    overflow: hidden;
    @include border-radius();

    overflow-y: scroll;
    max-height: 30rem;
    max-height: 60vh;
    box-shadow: inset get-dropshadow();
    margin-bottom: get-spacing();
  }

  &Empty {
    text-align: center;
  }

  thead th {
    padding: get-spacing(small)  get-spacing(small);
    background-color: get-color(text, lighter);
    font-size: get-font-size(small);
    position: sticky;
    top: 0;
  }

  .cellSelector {
    text-align: center;
  }
  
  tr {
    &:hover,
    &:focus {
        background-color: get-color(background, darken);
        cursor: pointer;
    }
  }
  
  tr[data-checked="true"] {
      &, &:hover, &:focus {
      background-color: get-color(primary);
      outline: 1px solid get-color(primary, dark);
    }
  }

  @include media(small) {
    thead tr { 
        position: absolute;
        top: -9999px;
        left: -9999px;
    }

    .cellSelector {
        padding-left: get-spacing(small);
    }

    input {
      position: absolute;
      display:block;
      top: get-spacing(large);
    }
    
    td {
        position: relative; 
        padding: 0 get-spacing(small) 0 get-spacing(large );
    }

    .cellSelector + td {padding-top: get-spacing()}
    td:last-child {padding-bottom: get-spacing()}
  }
}
