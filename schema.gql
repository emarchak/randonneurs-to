schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "chapter"
"""
type chapter {
  chapter_id: Int!
  name: String!
}

"""
Boolean expression to filter rows from the table "chapter". All fields are combined with a logical 'AND'.
"""
input chapter_bool_exp {
  _and: [chapter_bool_exp!]
  _not: chapter_bool_exp
  _or: [chapter_bool_exp!]
  chapter_id: Int_comparison_exp
  name: String_comparison_exp
}

"""Ordering options when selecting data from "chapter"."""
input chapter_order_by {
  chapter_id: order_by
  name: order_by
}

"""
select columns of table "chapter"
"""
enum chapter_select_column {
  """column name"""
  chapter_id

  """column name"""
  name
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "chapter"
  """
  chapter(
    """distinct select on columns"""
    distinct_on: [chapter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chapter_order_by!]

    """filter the rows returned"""
    where: chapter_bool_exp
  ): [chapter!]!

  """
  fetch data from the table: "route_current"
  """
  route_current(
    """distinct select on columns"""
    distinct_on: [route_current_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [route_current_order_by!]

    """filter the rows returned"""
    where: route_current_bool_exp
  ): [route_current!]!
}

"""
columns and relationships of "route_current"
"""
type route_current {
  chapter_name: String
  route_active: Boolean
  route_brevet_distance: Int
  route_cuesheet: String
  route_distance: Int
  route_id: Int
  route_name: String
  route_start_location: String
}

"""
Boolean expression to filter rows from the table "route_current". All fields are combined with a logical 'AND'.
"""
input route_current_bool_exp {
  _and: [route_current_bool_exp!]
  _not: route_current_bool_exp
  _or: [route_current_bool_exp!]
  chapter_name: String_comparison_exp
  route_active: Boolean_comparison_exp
  route_brevet_distance: Int_comparison_exp
  route_cuesheet: String_comparison_exp
  route_distance: Int_comparison_exp
  route_id: Int_comparison_exp
  route_name: String_comparison_exp
  route_start_location: String_comparison_exp
}

"""Ordering options when selecting data from "route_current"."""
input route_current_order_by {
  chapter_name: order_by
  route_active: order_by
  route_brevet_distance: order_by
  route_cuesheet: order_by
  route_distance: order_by
  route_id: order_by
  route_name: order_by
  route_start_location: order_by
}

"""
select columns of table "route_current"
"""
enum route_current_select_column {
  """column name"""
  chapter_name

  """column name"""
  route_active

  """column name"""
  route_brevet_distance

  """column name"""
  route_cuesheet

  """column name"""
  route_distance

  """column name"""
  route_id

  """column name"""
  route_name

  """column name"""
  route_start_location
}

type subscription_root {
  """
  fetch data from the table: "chapter"
  """
  chapter(
    """distinct select on columns"""
    distinct_on: [chapter_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [chapter_order_by!]

    """filter the rows returned"""
    where: chapter_bool_exp
  ): [chapter!]!

  """
  fetch data from the table: "route_current"
  """
  route_current(
    """distinct select on columns"""
    distinct_on: [route_current_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [route_current_order_by!]

    """filter the rows returned"""
    where: route_current_bool_exp
  ): [route_current!]!
}

